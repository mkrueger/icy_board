use i18n_embed_fl::fl;
use icy_board_engine::executable::{FuncOpCode, FunctionDefinition, OpCode, Signature, StatementDefinition, VariableType};
use tower_lsp::lsp_types::{Hover, HoverContents, MarkupContent, MarkupKind};

use crate::LANGUAGE_LOADER;

pub fn get_const_hover(c: &icy_board_engine::ast::constant::BuiltinConst) -> Option<Hover> {
    match c.name {
        "TRUE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-true")),
        "FALSE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-false")),
        "STK_LIMIT" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-stk_limit")),
        "ATTACH_LIM_P" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-attach_lim_p")),
        "ATTACH_LIM_U" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-attach_lim_u")),
        "ACC_CUR_BAL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-acc_cur_bal")),
        "F_NET" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-f_net")),
        "CMAXMSGS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-cmaxmsgs")),
        "MAXMSGS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-maxmsgs")),
        "CUR_USER" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-cur_user")),
        "NO_USER" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-no_user")),
        "ACC_STAT" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-acc_stat")),
        "ACC_TIME" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-acc_time")),
        "ACC_MSGREAD" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-acc_msgread")),
        "ACC_MSGWRITE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-acc_msgwrite")),
        "DEFS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-defs")),
        "BELL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-bell")),
        "LOGIT" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-logit")),
        "LOGITLEFT" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-logitleft")),
        "AUTO" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-auto")),
        "ECHODOTS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-echodots")),
        "ERASELINE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-eraseline")),
        "FIELDLEN" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-fieldlen")),
        "GUIDE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-guide")),
        "HIGHASCII" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-highascii")),
        "LFAFTER" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-lfafter")),
        "LFBEFORE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-lfbefore")),
        "NEWLINE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-newline")),
        "NOCLEAR" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-noclear")),
        "STACKED" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-stacked")),
        "UPCASE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-upcase")),
        "WORDWRAP" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-wordwrap")),
        "YESNO" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-yesno")),
        "NEWBALANCE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-newbalance")),
        "CHRG_CALL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_call")),
        "CHRG_TIME" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_time")),
        "CHRG_PEAKTIME" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_peaktime")),
        "CHRG_CHAT" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_chat")),
        "CHRG_MSGREAD" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_msgread")),
        "CHRG_MSGCAP" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_msgcap")),
        "CHRG_MSGWRITE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_msgwrite")),
        "CHRG_MSGECHOED" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_msgechoed")),
        "CHRG_MSGPRIVATE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_msgprivate")),
        "CHRG_DOWNFILE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_downfile")),
        "CHRG_DOWNBYTES" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-chrg_downbytes")),
        "PAY_UPFILE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-pay_upfile")),
        "PAY_UPBYTES" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-pay_upbytes")),
        "WARNLEVEL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-warnlevel")),
        "CRC_FILE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-crc_file")),
        "CRC_STR" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-crc_str")),
        "START_BAL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-start_bal")),
        "START_SESSION" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-start_session")),
        "DEB_CALL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_call")),
        "DEB_TIME" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_time")),
        "DEB_MSGREAD" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_msgread")),
        "DEB_MSGCAP" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_msgcap")),
        "DEB_MSGWRITE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_msgwrite")),
        "DEB_MSGECHOED" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_msgechoed")),
        "DEB_MSGPRIVATE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_msgprivate")),
        "DEB_DOWNFILE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_downfile")),
        "DEB_DOWNBYTES" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_downbytes")),
        "DEB_CHAT" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_chat")),
        "DEB_TPU" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_tpu")),
        "DEB_SPECIAL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-deb_special")),
        "CRED_UPFILE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-cred_upfile")),
        "CRED_UPBYTES" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-cred_upbytes")),
        "CRED_SPECIAL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-cred_special")),
        "SEC_DROP" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-sec_drop")),
        "F_EXP" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-f_exp")),
        "F_MW" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-f_mw")),
        "F_REG" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-f_reg")),
        "F_SEL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-f_sel")),
        "F_SYS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-f_sys")),
        "FCL" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-fcl")),
        "FNS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-fns")),
        "NC" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-nc")),
        "GRAPH" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-graph")),
        "SEC" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-sec")),
        "LANG" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-lang")),
        "HDR_ACTIVE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_active")),
        "HDR_BLOCKS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_blocks")),
        "HDR_DATE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_date")),
        "HDR_ECHO" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_echo")),
        "HDR_FROM" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_from")),
        "HDR_MSGNUM" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_msgnum")),
        "HDR_MSGREF" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_msgref")),
        "HDR_PWD" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_pwd")),
        "HDR_REPLY" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_reply")),
        "HDR_RPLYDATE" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_rplydate")),
        "HDR_RPLYTIME" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_rplytime")),
        "HDR_STATUS" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_status")),
        "HDR_SUBJ" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_subj")),
        "HDR_TIME" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_time")),
        "HDR_TO" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-hdr_to")),
        "O_RD" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-o_rd")),
        "O_RW" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-o_rw")),
        "O_WR" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-o_wr")),
        "SEEK_CUR" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-seek_cur")),
        "SEEK_END" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-seek_end")),
        "SEEK_SET" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-seek_set")),
        "S_DB" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-s_db")),
        "S_DN" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-s_dn")),
        "S_DR" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-s_dr")),
        "S_DW" => get_sig_hint(c.get_signature(), fl!(crate::LANGUAGE_LOADER, "hint-const-s_dw")),
        _ => None,
    }
}

pub fn get_type_hover(var_type: VariableType) -> Option<Hover> {
    match var_type {
        VariableType::Boolean => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-boolean")),
        VariableType::Unsigned => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-unsigned")),
        VariableType::Date => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-date")),
        VariableType::EDate => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-edate")),
        VariableType::Integer => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-integer")),
        VariableType::Money => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-money")),
        VariableType::Float => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-float")),
        VariableType::String => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-string")),
        VariableType::Time => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-time")),
        VariableType::Byte => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-byte")),
        VariableType::Word => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-word")),
        VariableType::SByte => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-sbyte")),
        VariableType::SWord => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-sword")),
        VariableType::BigStr => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-bigstr")),
        VariableType::Double => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-double")),
        VariableType::DDate => get_sig_hint(var_type.get_signature(), fl!(LANGUAGE_LOADER, "hint-type-ddate")),
        _ => None,
    }
}

fn format_signature(sig: Signature, arg: String) -> MarkupContent {
    let mut value = format!("`{}`\n\n{arg}", sig.signature);

    for i in 0..sig.args.len() {
        value = value.replace(&format!("@{}", i + 1), &format!("`{}`", sig.args[i]))
    }
    MarkupContent {
        kind: MarkupKind::Markdown,
        value,
    }
}

fn get_sig_hint(sig: Signature, arg: String) -> Option<Hover> {
    Some(Hover {
        contents: HoverContents::Markup(format_signature(sig, arg)),
        range: None,
    })
}

pub fn get_function_hover(func: &FunctionDefinition) -> Option<Hover> {
    let sig = func.get_signature();
    match func.opcode {
        FuncOpCode::LEN => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-len")),
        FuncOpCode::LOWER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-lower")),
        FuncOpCode::UPPER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-upper")),
        FuncOpCode::MID => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mid")),
        FuncOpCode::LEFT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-left")),
        FuncOpCode::RIGHT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-right")),
        FuncOpCode::SPACE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-space")),
        FuncOpCode::FERR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ferr")),
        FuncOpCode::CHR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-chr")),
        FuncOpCode::ASC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-asc")),
        FuncOpCode::INSTR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-instr")),
        FuncOpCode::ABORT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-abort")),
        FuncOpCode::LTRIM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ltrim")),
        FuncOpCode::RTRIM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-rtrim")),
        FuncOpCode::TRIM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-trim")),
        FuncOpCode::RANDOM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-random")),
        FuncOpCode::DATE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-date")),
        FuncOpCode::TIME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-time")),
        FuncOpCode::U_NAME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_name")),
        FuncOpCode::U_LDATE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_ldate")),
        FuncOpCode::U_LTIME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_ltime")),
        FuncOpCode::U_LDIR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_ldir")),
        FuncOpCode::U_LOGONS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_logons")),
        FuncOpCode::U_FUL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_ful")),
        FuncOpCode::U_FDL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_fdl")),
        FuncOpCode::U_BDLDAY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_bdlday")),
        FuncOpCode::U_TIMEON => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_timeon")),
        FuncOpCode::U_BDL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_bdl")),
        FuncOpCode::U_BUL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_bul")),
        FuncOpCode::YEAR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-year")),
        FuncOpCode::MONTH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-month")),
        FuncOpCode::DAY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-day")),
        FuncOpCode::DOW => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dow")),
        FuncOpCode::HOUR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-hour")),
        FuncOpCode::MIN => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-min")),
        FuncOpCode::SEC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-sec")),
        FuncOpCode::TIMEAP => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-timeap")),
        FuncOpCode::VER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ver")),
        FuncOpCode::NOCHAR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-nochar")),
        FuncOpCode::YESCHAR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-yeschar")),
        FuncOpCode::STRIPATX => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-stripatx")),
        FuncOpCode::REPLACE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-replace")),
        FuncOpCode::STRIP => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-strip")),
        FuncOpCode::INKEY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-inkey")),
        FuncOpCode::TOSTRING => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tostring")),
        FuncOpCode::MASK_PWD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mask_pwd")),
        FuncOpCode::MASK_ALPHA => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mask_alpha")),
        FuncOpCode::MASK_NUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mask_num")),
        FuncOpCode::MASK_ALNUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mask_alnum")),
        FuncOpCode::MASK_FILE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mask_file")),
        FuncOpCode::MASK_PATH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mask_path")),
        FuncOpCode::MASK_ASCII => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mask_ascii")),
        FuncOpCode::CURCONF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-curconf")),
        FuncOpCode::PCBDAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-pcbdat")),
        FuncOpCode::PPEPATH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ppepath")),
        FuncOpCode::VALDATE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-valdate")),
        FuncOpCode::VALTIME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-valtime")),
        FuncOpCode::U_MSGRD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_msgrd")),
        FuncOpCode::U_MSGWR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_msgwr")),
        FuncOpCode::PCBNODE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-pcbnode")),
        FuncOpCode::READLINE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-readline")),
        FuncOpCode::SYSOPSEC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-sysopsec")),
        FuncOpCode::ONLOCAL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-onlocal")),
        FuncOpCode::UN_STAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-un_stat")),
        FuncOpCode::UN_NAME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-un_name")),
        FuncOpCode::UN_CITY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-un_city")),
        FuncOpCode::UN_OPER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-un_oper")),
        FuncOpCode::CURSEC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-cursec")),
        FuncOpCode::GETTOKEN => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-gettoken")),
        FuncOpCode::MINLEFT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-minleft")),
        FuncOpCode::MINON => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-minon")),
        FuncOpCode::GETENV => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-getenv")),
        FuncOpCode::CALLID => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-callid")),
        FuncOpCode::REGAL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regal")),
        FuncOpCode::REGAH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regah")),
        FuncOpCode::REGBL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regbl")),
        FuncOpCode::REGBH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regbh")),
        FuncOpCode::REGCL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regcl")),
        FuncOpCode::REGCH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regch")),
        FuncOpCode::REGDL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regdl")),
        FuncOpCode::REGDH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regdh")),
        FuncOpCode::REGAX => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regax")),
        FuncOpCode::REGBX => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regbx")),
        FuncOpCode::REGCX => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regcx")),
        FuncOpCode::REGDX => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regdx")),
        FuncOpCode::REGSI => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regsi")),
        FuncOpCode::REGDI => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regdi")),
        FuncOpCode::REGF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regf")),
        FuncOpCode::REGCF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regcf")),
        FuncOpCode::REGDS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-regds")),
        FuncOpCode::REGES => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-reges")),
        FuncOpCode::B2W => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-b2w")),
        FuncOpCode::PEEKB => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-peekb")),
        FuncOpCode::PEEKW => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-peekw")),
        FuncOpCode::MKADDR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mkaddr")),
        FuncOpCode::EXIST => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-exist")),
        FuncOpCode::I2S => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-i2s")),
        FuncOpCode::S2I => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-s2i")),
        FuncOpCode::CARRIER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-carrier")),
        FuncOpCode::TOKENSTR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tokenstr")),
        FuncOpCode::CDON => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-cdon")),
        FuncOpCode::LANGEXT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-langext")),
        FuncOpCode::ANSION => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ansion")),
        FuncOpCode::VALCC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-valcc")),
        FuncOpCode::FMTCC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fmtcc")),
        FuncOpCode::CCTYPE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-cctype")),
        FuncOpCode::GETX => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-getx")),
        FuncOpCode::GETY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-gety")),
        FuncOpCode::BAND => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-band")),
        FuncOpCode::BOR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-bor")),
        FuncOpCode::BXOR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-bxor")),
        FuncOpCode::BNOT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-bnot")),
        FuncOpCode::U_PWDHIST => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_pwdhist")),
        FuncOpCode::U_PWDLC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_pwdlc")),
        FuncOpCode::U_PWDTC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_pwdtc")),
        FuncOpCode::U_STAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_stat")),
        FuncOpCode::DEFCOLOR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-defcolor")),
        FuncOpCode::ABS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-abs")),
        FuncOpCode::GRAFMODE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-grafmode")),
        FuncOpCode::PSA => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-psa")),
        FuncOpCode::FILEINF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fileinf")),
        FuncOpCode::PPENAME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ppename")),
        FuncOpCode::MKDATE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mkdate")),
        FuncOpCode::CURCOLOR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-curcolor")),
        FuncOpCode::KINKEY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-kinkey")),
        FuncOpCode::MINKEY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-minkey")),
        FuncOpCode::MAXNODE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-maxnode")),
        FuncOpCode::SLPATH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-slpath")),
        FuncOpCode::HELPPATH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-helppath")),
        FuncOpCode::TEMPPATH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-temppath")),
        FuncOpCode::MODEM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-modem")),
        FuncOpCode::LOGGEDON => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-loggedon")),
        FuncOpCode::CALLNUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-callnum")),
        FuncOpCode::MGETBYTE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mgetbyte")),
        FuncOpCode::TOKCOUNT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tokcount")),
        FuncOpCode::U_RECNUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_recnum")),
        FuncOpCode::U_INCONF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_inconf")),
        FuncOpCode::PEEKDW => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-peekdw")),
        FuncOpCode::DBGLEVEL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dbglevel")),
        FuncOpCode::SCRTEXT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-scrtext")),
        FuncOpCode::SHOWSTAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-showstat")),
        FuncOpCode::PAGESTAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-pagestat")),
        FuncOpCode::REPLACESTR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-replacestr")),
        FuncOpCode::STRIPSTR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-stripstr")),
        FuncOpCode::TOBIGSTR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tobigstr")),
        FuncOpCode::TOBOOLEAN => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-toboolean")),
        FuncOpCode::TOBYTE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tobyte")),
        FuncOpCode::TODATE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-todate")),
        FuncOpCode::TODREAL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-todreal")),
        FuncOpCode::TOEDATE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-toedate")),
        FuncOpCode::TOINTEGER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tointeger")),
        FuncOpCode::TOMONEY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tomoney")),
        FuncOpCode::TOREAL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-toreal")),
        FuncOpCode::TOSBYTE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tosbyte")),
        FuncOpCode::TOSWORD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tosword")),
        FuncOpCode::TOTIME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-totime")),
        FuncOpCode::TOUNSIGNED => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tounsigned")),
        FuncOpCode::TOWORD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-toword")),
        FuncOpCode::MIXED => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-mixed")),
        FuncOpCode::ALIAS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-alias")),
        FuncOpCode::CONFREG => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-confreg")),
        FuncOpCode::CONFEXP => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-confexp")),
        FuncOpCode::CONFSEL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-confsel")),
        FuncOpCode::CONFSYS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-confsys")),
        FuncOpCode::CONFMW => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-confmw")),
        FuncOpCode::LPRINTED => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-lprinted")),
        FuncOpCode::ISNONSTOP => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-isnonstop")),
        FuncOpCode::ERRCORRECT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-errcorrect")),
        FuncOpCode::CONFALIAS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-confalias")),
        FuncOpCode::USERALIAS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-useralias")),
        FuncOpCode::CURUSER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-curuser")),
        FuncOpCode::U_LMR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-u_lmr")),
        FuncOpCode::CHATSTAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-chatstat")),
        FuncOpCode::DEFANS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-defans")),
        FuncOpCode::LASTANS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-lastans")),
        FuncOpCode::MEGANUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-meganum")),
        FuncOpCode::EVTTIMEADJ => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-evttimeadj")),
        FuncOpCode::ISBITSET => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-isbitset")),
        FuncOpCode::FMTREAL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fmtreal")),
        FuncOpCode::FLAGCNT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-flagcnt")),
        FuncOpCode::KBDBUFSIZE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-kbdbufsize")),
        FuncOpCode::PPLBUFSIZE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-pplbufsize")),
        FuncOpCode::KBDFILUSED => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-kbdfilused")),
        FuncOpCode::LOMSGNUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-lomsgnum")),
        FuncOpCode::HIMSGNUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-himsgnum")),
        FuncOpCode::DRIVESPACE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-drivespace")),
        FuncOpCode::OUTBYTES => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-outbytes")),
        FuncOpCode::HICONFNUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-hiconfnum")),
        FuncOpCode::INBYTES => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-inbytes")),
        FuncOpCode::CRC32 => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-crc32")),
        FuncOpCode::PCBMAC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-pcbmac")),
        FuncOpCode::ACTMSGNUM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-actmsgnum")),
        FuncOpCode::STACKLEFT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-stackleft")),
        FuncOpCode::STACKERR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-stackerr")),
        FuncOpCode::DGETALIAS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dgetalias")),
        FuncOpCode::DBOF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dbof")),
        FuncOpCode::DCHANGED => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dchanged")),
        FuncOpCode::DDECIMALS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ddecimals")),
        FuncOpCode::DDELETED => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ddeleted")),
        FuncOpCode::DEOF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-deof")),
        FuncOpCode::DERR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-derr")),
        FuncOpCode::DFIELDS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dfields")),
        FuncOpCode::DLENGTH => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dlength")),
        FuncOpCode::DNAME => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dname")),
        FuncOpCode::DRECCOUNT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dreccount")),
        FuncOpCode::DRECNO => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-drecno")),
        FuncOpCode::DTYPE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dtype")),
        FuncOpCode::FNEXT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fnext")),
        FuncOpCode::DNEXT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dnext")),
        FuncOpCode::TODDATE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-toddate")),
        FuncOpCode::DCLOSEALL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dcloseall")),
        FuncOpCode::DOPEN => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dopen")),
        FuncOpCode::DCLOSE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dclose")),
        FuncOpCode::DSETALIAS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dsetalias")),
        FuncOpCode::DPACK => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dpack")),
        FuncOpCode::DLOCKF => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dlockf")),
        FuncOpCode::DLOCK => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dlock")),
        FuncOpCode::DLOCKR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dlockr")),
        FuncOpCode::DUNLOCK => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dunlock")),
        FuncOpCode::DNOPEN => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dnopen")),
        FuncOpCode::DNCLOSE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dnclose")),
        FuncOpCode::DNCLOSEALL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dncloseall")),
        FuncOpCode::DNEW => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dnew")),
        FuncOpCode::DADD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dadd")),
        FuncOpCode::DAPPEND => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dappend")),
        FuncOpCode::DTOP => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dtop")),
        FuncOpCode::DGO => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dgo")),
        FuncOpCode::DBOTTOM => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dbottom")),
        FuncOpCode::DSKIP => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dskip")),
        FuncOpCode::DBLANK => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dblank")),
        FuncOpCode::DDELETE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ddelete")),
        FuncOpCode::DRECALL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-drecall")),
        FuncOpCode::DTAG => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dtag")),
        FuncOpCode::DSEEK => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dseek")),
        FuncOpCode::DFBLANK => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dfblank")),
        FuncOpCode::DGET => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dget")),
        FuncOpCode::DPUT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dput")),
        FuncOpCode::DFCOPY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dfcopy")),
        FuncOpCode::DSELECT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dselect")),
        FuncOpCode::DCHKSTAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-dchkstat")),
        FuncOpCode::PCBACCOUNT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-pcbaccount")),
        FuncOpCode::PCBACCSTAT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-pcbaccstat")),
        FuncOpCode::DERRMSG => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-derrmsg")),
        FuncOpCode::ACCOUNT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-account")),
        FuncOpCode::SCANMSGHDR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-scanmsghdr")),
        FuncOpCode::CHECKRIP => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-checkrip")),
        FuncOpCode::RIPVER => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ripver")),
        FuncOpCode::QWKLIMITS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-qwklimits")),
        FuncOpCode::FINDFIRST => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-findfirst")),
        FuncOpCode::FINDNEXT => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-findnext")),
        FuncOpCode::USELMRS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-uselmrs")),
        FuncOpCode::CONFINFO => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-confinfo")),
        FuncOpCode::TINKEY => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-tinkey")),
        FuncOpCode::CWD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-cwd")),
        FuncOpCode::INSTRR => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-instrr")),
        FuncOpCode::FDORDAKA => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fdordaka")),
        FuncOpCode::FDORDORG => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fdordorg")),
        FuncOpCode::FDORDAREA => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fdordarea")),
        FuncOpCode::FDOQRD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-fdoqrd")),
        FuncOpCode::GETDRIVE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-getdrive")),
        FuncOpCode::SETDRIVE => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-setdrive")),
        FuncOpCode::BS2I => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-bs2i")),
        FuncOpCode::BD2I => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-bd2i")),
        FuncOpCode::I2BS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-i2bs")),
        FuncOpCode::I2BD => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-i2bd")),
        FuncOpCode::FTELL => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-ftell")),
        FuncOpCode::OS => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-os")),
        FuncOpCode::SHORT_DESC => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-short_desc")),
        FuncOpCode::GetBankBal => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-getbankbal")),
        FuncOpCode::GetMsgHdr => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-getmsghdr")),
        FuncOpCode::SetMsgHdr => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-setmsghdr")),
        FuncOpCode::NewConfInfo => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-newconfinfo")),
        FuncOpCode::AreaId => get_sig_hint(sig, fl!(crate::LANGUAGE_LOADER, "hint-function-areaid")),
        _ => None,
    }
}

#[cfg(test)]
mod test {
    use icy_board_engine::executable::FUNCTION_DEFINITIONS;

    #[test]
    fn test_function_translations() {
        for f in FUNCTION_DEFINITIONS.iter() {
            if f.arg_descr < 0 || f.arg_descr >= 0x10 {
                continue;
            }
            super::get_function_hover(f).unwrap();
        }
    }
}

pub fn get_statement_hover(stmt: &StatementDefinition) -> Option<Hover> {
    let sig = stmt.get_signature();
    match stmt.opcode {
        OpCode::END => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-end")),
        OpCode::CLS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-cls")),
        OpCode::CLREOL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-clreol")),
        OpCode::MORE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-more")),
        OpCode::WAIT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-wait")),
        OpCode::COLOR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-color")),
        OpCode::GOTO => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-goto")),
        OpCode::LET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-let")),
        OpCode::PRINT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-print")),
        OpCode::PRINTLN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-println")),
        OpCode::CONFFLAG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-confflag")),
        OpCode::CONFUNFLAG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-confunflag")),
        OpCode::DISPFILE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dispfile")),
        OpCode::INPUT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-input")),
        OpCode::FCREATE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fcreate")),
        OpCode::FOPEN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fopen")),
        OpCode::FAPPEND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fappend")),
        OpCode::FCLOSE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fclose")),
        OpCode::FGET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fget")),
        OpCode::FPUT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fput")),
        OpCode::FPUTLN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fputln")),
        OpCode::RESETDISP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-resetdisp")),
        OpCode::STARTDISP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-startdisp")),
        OpCode::FPUTPAD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fputpad")),
        OpCode::HANGUP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-hangup")),
        OpCode::GETUSER => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-getuser")),
        OpCode::PUTUSER => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-putuser")),
        OpCode::DEFCOLOR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-defcolor")),
        OpCode::DELETE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-delete")),
        OpCode::DELUSER => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-deluser")),
        OpCode::ADJTIME => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-adjtime")),
        OpCode::LOG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-log")),
        OpCode::INPUTSTR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputstr")),
        OpCode::INPUTYN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputyn")),
        OpCode::INPUTMONEY => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputmoney")),
        OpCode::INPUTINT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputint")),
        OpCode::INPUTCC => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputcc")),
        OpCode::INPUTDATE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputdate")),
        OpCode::INPUTTIME => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputtime")),
        OpCode::GOSUB => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-gosub")),
        OpCode::RETURN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-return")),
        OpCode::PROMPTSTR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-promptstr")),
        OpCode::DTRON => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dtron")),
        OpCode::DTROFF => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dtroff")),
        OpCode::CDCHKON => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-cdchkon")),
        OpCode::CDCHKOFF => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-cdchkoff")),
        OpCode::DELAY => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-delay")),
        OpCode::SENDMODEM => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-sendmodem")),
        OpCode::INC => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inc")),
        OpCode::DEC => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dec")),
        OpCode::NEWLINE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-newline")),
        OpCode::NEWLINES => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-newlines")),
        OpCode::TOKENIZE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tokenize")),
        OpCode::GETTOKEN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-gettoken")),
        OpCode::SHELL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-shell")),
        OpCode::DISPTEXT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-disptext")),
        OpCode::STOP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-stop")),
        OpCode::INPUTTEXT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-inputtext")),
        OpCode::BEEP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-beep")),
        OpCode::PUSH => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-push")),
        OpCode::POP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-pop")),
        OpCode::KBDSTUFF => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-kbdstuff")),
        OpCode::CALL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-call")),
        OpCode::JOIN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-join")),
        OpCode::QUEST => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-quest")),
        OpCode::BLT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-blt")),
        OpCode::DIR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dir")),
        OpCode::KBDFILE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-kbdfile")),
        OpCode::BYE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-bye")),
        OpCode::GOODBYE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-goodbye")),
        OpCode::BROADCAST => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-broadcast")),
        OpCode::WAITFOR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-waitfor")),
        OpCode::KBDCHKON => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-kbdchkon")),
        OpCode::KBDCHKOFF => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-kbdchkoff")),
        OpCode::OPTEXT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-optext")),
        OpCode::DISPSTR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dispstr")),
        OpCode::RDUNET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-rdunet")),
        OpCode::WRUNET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-wrunet")),
        OpCode::DOINTR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dointr")),
        OpCode::VARSEG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-varseg")),
        OpCode::VAROFF => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-varoff")),
        OpCode::POKEB => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-pokeb")),
        OpCode::POKEW => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-pokew")),
        OpCode::VARADDR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-varaddr")),
        OpCode::ANSIPOS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-ansipos")),
        OpCode::BACKUP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-backup")),
        OpCode::FORWARD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-forward")),
        OpCode::FRESHLINE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-freshline")),
        OpCode::WRUSYS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-wrusys")),
        OpCode::RDUSYS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-rdusys")),
        OpCode::NEWPWD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-newpwd")),
        OpCode::OPENCAP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-opencap")),
        OpCode::CLOSECAP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-closecap")),
        OpCode::MESSAGE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-message")),
        OpCode::SAVESCRN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-savescrn")),
        OpCode::RESTSCRN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-restscrn")),
        OpCode::SOUND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-sound")),
        OpCode::CHAT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-chat")),
        OpCode::SPRINT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-sprint")),
        OpCode::SPRINTLN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-sprintln")),
        OpCode::MPRINT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-mprint")),
        OpCode::MPRINTLN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-mprintln")),
        OpCode::RENAME => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-rename")),
        OpCode::FREWIND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-frewind")),
        OpCode::POKEDW => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-pokedw")),
        OpCode::DBGLEVEL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dbglevel")),
        OpCode::SHOWON => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-showon")),
        OpCode::SHOWOFF => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-showoff")),
        OpCode::PAGEON => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-pageon")),
        OpCode::PAGEOFF => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-pageoff")),
        OpCode::FSEEK => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fseek")),
        OpCode::FFLUSH => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fflush")),
        OpCode::FREAD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fread")),
        OpCode::FWRITE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fwrite")),
        OpCode::FDEFIN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdefin")),
        OpCode::FDEFOUT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdefout")),
        OpCode::FDGET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdget")),
        OpCode::FDPUT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdput")),
        OpCode::FDPUTLN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdputln")),
        OpCode::FDPUTPAD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdputpad")),
        OpCode::FDREAD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdread")),
        OpCode::FDWRITE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdwrite")),
        OpCode::ADJBYTES => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-adjbytes")),
        OpCode::KBDSTRING => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-kbdstring")),
        OpCode::ALIAS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-alias")),
        OpCode::REDIM => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-redim")),
        OpCode::APPEND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-append")),
        OpCode::COPY => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-copy")),
        OpCode::KBDFLUSH => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-kbdflush")),
        OpCode::MDMFLUSH => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-mdmflush")),
        OpCode::KEYFLUSH => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-keyflush")),
        OpCode::LASTIN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-lastin")),
        OpCode::FLAG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-flag")),
        OpCode::DOWNLOAD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-download")),
        OpCode::WRUSYSDOOR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-wrusysdoor")),
        OpCode::GETALTUSER => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-getaltuser")),
        OpCode::ADJDBYTES => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-adjdbytes")),
        OpCode::ADJTBYTES => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-adjtbytes")),
        OpCode::ADJTFILES => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-adjtfiles")),
        OpCode::LANG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-lang")),
        OpCode::SORT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-sort")),
        OpCode::MOUSEREG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-mousereg")),
        OpCode::SCRFILE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-scrfile")),
        OpCode::SEARCHINIT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-searchinit")),
        OpCode::SEARCHFIND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-searchfind")),
        OpCode::SEARCHSTOP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-searchstop")),
        OpCode::PRFOUND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-prfound")),
        OpCode::PRFOUNDLN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-prfoundln")),
        OpCode::TPAGET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tpaget")),
        OpCode::TPAPUT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tpaput")),
        OpCode::TPACGET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tpacget")),
        OpCode::TPACPUT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tpacput")),
        OpCode::TPAREAD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tparead")),
        OpCode::TPAWRITE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tpawrite")),
        OpCode::TPACREAD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tpacread")),
        OpCode::TPACWRITE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-tpacwrite")),
        OpCode::BITSET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-bitset")),
        OpCode::BITCLEAR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-bitclear")),
        OpCode::BRAG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-brag")),
        OpCode::FREALTUSER => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-frealtuser")),
        OpCode::SETLMR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-setlmr")),
        OpCode::SETENV => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-setenv")),
        OpCode::FCLOSEALL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fcloseall")),
        OpCode::STACKABORT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-stackabort")),
        OpCode::DCREATE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dcreate")),
        OpCode::DOPEN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dopen")),
        OpCode::DCLOSE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dclose")),
        OpCode::DSETALIAS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dsetalias")),
        OpCode::DPACK => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dpack")),
        OpCode::DCLOSEALL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dcloseall")),
        OpCode::DLOCK => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dlock")),
        OpCode::DLOCKR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dlockr")),
        OpCode::DLOCKG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dlockg")),
        OpCode::DUNLOCK => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dunlock")),
        OpCode::DNCREATE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dncreate")),
        OpCode::DNOPEN => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dnopen")),
        OpCode::DNCLOSE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dnclose")),
        OpCode::DNCLOSEALL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dncloseall")),
        OpCode::DNEW => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dnew")),
        OpCode::DADD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dadd")),
        OpCode::DAPPEND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dappend")),
        OpCode::DTOP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dtop")),
        OpCode::DGO => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dgo")),
        OpCode::DBOTTOM => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dbottom")),
        OpCode::DSKIP => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dskip")),
        OpCode::DBLANK => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dblank")),
        OpCode::DDELETE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-ddelete")),
        OpCode::DRECALL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-drecall")),
        OpCode::DTAG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dtag")),
        OpCode::DSEEK => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dseek")),
        OpCode::DFBLANK => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dfblank")),
        OpCode::DGET => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dget")),
        OpCode::DPUT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dput")),
        OpCode::DFCOPY => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-dfcopy")),
        OpCode::ACCOUNT => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-account")),
        OpCode::RECORDUSAGE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-recordusage")),
        OpCode::MSGTOFILE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-msgtofile")),
        OpCode::QWKLIMITS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-qwklimits")),
        OpCode::COMMAND => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-command")),
        OpCode::USELMRS => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-uselmrs")),
        OpCode::CONFINFO => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-confinfo")),
        OpCode::ADJTUBYTES => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-adjtubytes")),
        OpCode::GRAFMODE => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-grafmode")),
        OpCode::ADDUSER => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-adduser")),
        OpCode::KILLMSG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-killmsg")),
        OpCode::CHDIR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-chdir")),
        OpCode::MKDIR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-mkdir")),
        OpCode::RMDIR => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-rmdir")),
        OpCode::FDOWRAKA => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdowraka")),
        OpCode::FDOADDAKA => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdoaddaka")),
        OpCode::FDOWRORG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdowrorg")),
        OpCode::FDOADDORG => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdoaddorg")),
        OpCode::FDOQMOD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdoqmod")),
        OpCode::FDOQADD => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdoqadd")),
        OpCode::FDOQDEL => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-fdoqdel")),
        OpCode::SOUNDDELAY => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-sounddelay")),
        OpCode::ShortDesc => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-shortdesc")),
        OpCode::MoveMsg => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-movemsg")),
        OpCode::SetBankBal => get_sig_hint(sig, fl!(LANGUAGE_LOADER, "hint-statement-setbankbal")),
        _ => None,
    }
}
