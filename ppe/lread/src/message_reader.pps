DECLARE PROCEDURE SplitByComma(STRING S)

BOOLEAN ReadConfig = FALSE

INTEGER ToX, ToY, ToLen
INTEGER FromX, FromY, FromLen
INTEGER SubjX, SubjY, SubjLen
INTEGER NumberX, NumberY
INTEGER DateX, DateY
INTEGER MsgX1, MsgY1, MsgX2, MsgY2


INTEGER PrevX, PrevY
STRING PrevLabel
INTEGER NextX, NextY
STRING NextLabel
INTEGER ReplyX, ReplyY
STRING ReplyLabel
INTEGER QuitX, QuitY
STRING QuitLabel

INTEGER MSG_LEN
STRING MSGDATE, MSGTIME, MSGTO, MSGFROM, MSGSUBJ, MSGNUMBER
STRING MSGTXT(200)

STRING CsvToken(20)
INTEGER CsvCount

INTEGER MenuIndex = 0  ; 0=Prev,1=Next,2=Reply,3=Quit


PROCEDURE ReadMsg()
    IF !ReadConfig THEN 
        ReadConfig = TRUE
        ReadMsgConfig()
    ENDIF

    STRING MsgFile = PPEPath() + "msgtxt." + STRING(PCBNode())
    IF !Exist(MsgFile) THEN
        LOG "Message file " + MsgFile + "  doesn't exists", true
        STOP
    ENDIF
    FOpen 1, MsgFile, O_RD, S_DB
    MSGTO = "<EMPTYTO>"
    MSGFROM = "<EMPTYFROM>"
    MSGSUBJ = "<EMPTYSUBJ>"
    MSGNUMBER = "<EMPTY#>"
    MSGDATE = "<DATE>"
    MSGTIME = "<TIME>"
    MSG_LEN = 0

    LOOP 
        FGet 1, line
        IF FErr(1) RETURN
        LOG ">" + Left(line, 17) + "<", true
        SELECT CASE Left(line, 17)
        CASE "            Date:"
            MSGDATE = Mid(line, 19, 8)
        CASE "            Time:"
            MSGTIME = Mid(line, 19, 5)
        CASE "              To:"
            MSGTO   = Left(Mid(line, 19, LEN(line) - 18), ToLen)
        CASE "            From:"
            MSGFROM = Left(Mid(line, 19, LEN(line) - 18), FromLen)
        CASE "         Subject:"
            MSGSUBJ = Left(Mid(line, 19, LEN(line) - 18), SubjLen)
        CASE "  Message Number:"
            MSGNUMBER = Left(Mid(line, 19, LEN(line) - 18), 5)
        CASE "Extended headers:"
            I = 0
            J = TOINT(Mid(line, 19, LEN(line) - 18))
            WHILE I < J DO
                FGet 1, line
                IF LEFT(line, 8) == "SUBJECT:" THEN
                    MSGSUBJ = Left(Mid(line, 9, LEN(line) - 9), SubjLen)
                ENDIF
                I += 1
            ENDWHILE
        ENDSELECT

        IF line == "Message Body:" BREAK
    ENDLOOP

    MSG_LEN = 0
    While MSG_LEN < 200 DO
        FGet 1, MSGTXT[MSG_LEN]
        WHILE LEN(MSGTXT[MSG_LEN]) > MsgX2 - MsgX1 DO 
            MSGTXT[MSG_LEN + 1] = Right(MSGTXT[MSG_LEN], LEN(MSGTXT[MSG_LEN]) - (MsgX2 - MsgX1))
            MSGTXT[MSG_LEN] = Left(MSGTXT[MSG_LEN], MsgX2 - MsgX1)
            MSG_LEN += 1
        ENDWHILE
        IF FErr(1) BREAK
        MSG_LEN += 1
    ENDWHILE
    FClose 1
    :RedrawReader
    Cls
    StartDisp FNS
    DispFile PPEPath() + "data\reader.pcb", GRAPH
    DrawMenu()

    DefColor
    AnsiPos ToX, ToY
    Print MSGTO
    
    AnsiPos FromX, FromY
    Print MSGFROM
    
    AnsiPos SubjX, SubjY
    Print MSGSUBJ
    
    AnsiPos NumberX, NumberY
    Print MSGNUMBER
    
    AnsiPos DateX, DateY
    Print MSGDATE + " " + MSGTIME

    AnsiPos MsgX1, MsgY1
    INTEGER first_line = 0              
    
    INTEGER I
    :RedrawMsg
    FOR I = 0 TO MsgY2 - MsgY1
        AnsiPos MsgX1, MsgY1 + I
        DefColor
        IF I < MSG_LEN THEN
            IF LEN(MSGTXT[I + first_line]) != MsgX2 - MsgX1 THEN
                MSGTXT[I + first_line] = Left(MSGTXT[I + first_line], MsgX2 - MsgX1)
            ENDIF
            PRINT MSGTXT[I + first_line]
        ELSE
            PRINT Space(MsgX2 - MsgX1)
        ENDIF
    NEXT

    LOOP
        STRING CH = InKey()
        
        SELECT CASE CH
        CASE Chr(27)
            BREAK
        CASE "UP"
            IF first_line > 0 THEN
                first_line -= 1
                goto RedrawMsg
            ENDIF
        CASE "DOWN"
            IF first_line + MsgY2 - MsgY1 < MSG_LEN THEN
                first_line += 1
                goto RedrawMsg
            ENDIF
        CASE "PGUP"
            IF first_line != 0 THEN
                first_line = 0
                goto RedrawMsg
            ENDIF
        CASE "PGDN"
             IF first_line + MsgY2 - MsgY1 < MSG_LEN THEN
                if MSG_LEN > MsgY2 - MsgY1 THEN 
                    first_line = MSG_LEN - (MsgY2 - MsgY1)
                    goto RedrawMsg
                ENDIF
            ENDIF
        CASE "HOME"
            first_line = 0
            GOTO RedrawMsg
        CASE "END"
            IF MSG_LEN > (MsgY2 - MsgY1) THEN
                first_line = MSG_LEN - (MsgY2 - MsgY1)
                IF first_line < 0 THEN first_line = 0 ENDIF
            ELSE
                first_line = 0
            ENDIF
            GOTO RedrawMsg            
        CASE "H", "h"
            Cls
            StartDisp FNS
            DispFile PPEPath() + "data\helprd.pcb", GRAPH
            Wait
            goto RedrawReader         
        CASE "R", "r"
            Cls
            Command false, "REPLY " + MSGNUMBER
            Goto RedrawReader
        CASE "LEFT"
            IF MenuIndex > 0 THEN
                MenuIndex -= 1
            ELSE 
                MenuIndex = 3
            ENDIF
            DrawMenu()
        CASE "RIGHT"
            IF MenuIndex < 3 THEN
                MenuIndex += 1
            ELSE 
                MenuIndex = 0
            ENDIF
            DrawMenu()
        CASE Chr(13)          ; ENTER executes selected
            SELECT CASE MenuIndex
            CASE 0            ; Prev    
                Up()
                WriteMsgFile()
                ReadMsg()
                RETURN
            CASE 1            ; Next
                Down()
                WriteMsgFile()
                ReadMsg()
                RETURN
            CASE 2            ; Reply
                Cls
                Command FALSE, "REPLY " + STRING(MSGNUMBER)
                BREAK
            CASE 3            ; Quit
                RETURN
            ENDSELECT            
        ENDSELECT
    ENDLOOP
ENDPROC 

PROCEDURE DrawMenu()
    ; Highlight color for selected item
    ; Adjust colors as desired
    INTEGER selColor = 31

    ; Prev
    AnsiPos PrevX, PrevY
    IF (MenuIndex == 0) THEN
        COLOR selColor 
        Print UPPER(PrevLabel)
    ELSE
        DefColor
        Print PrevLabel
    ENDIF

    ; Next
    AnsiPos NextX, NextY
    IF (MenuIndex == 1) THEN
        COLOR selColor
        Print UPPER(NextLabel)
    ELSE
        DefColor
        Print NextLabel
    ENDIF

    ; Reply
    AnsiPos ReplyX, ReplyY
    IF (MenuIndex == 2) THEN
        COLOR selColor
        Print UPPER(ReplyLabel)
    ELSE
        DefColor
        Print ReplyLabel
    ENDIF

    ; Quit
    AnsiPos QuitX, QuitY
    IF (MenuIndex == 3) THEN
        COLOR selColor
        Print UPPER(QuitLabel)
    ELSE
        DefColor
        Print QuitLabel
    ENDIF

    DefColor
ENDPROC

PROCEDURE ReadMsgConfig()
    FOpen 1, PPEPath() + "msg.cfg", O_RD, S_DB

    FGet 1, LINE
    
    TOKENIZE LINE
    ToX = ToInt(GETTOKEN())
    ToY = ToInt(GETTOKEN())
    ToLen = ToInt(GETTOKEN())

    FGet 1, LINE
    TOKENIZE LINE
    FromX = ToInt(GETTOKEN())
    FromY = ToInt(GETTOKEN())
    FromLen = ToInt(GETTOKEN())
    
    FGet 1, LINE
    TOKENIZE LINE
    SubjX = ToInt(GETTOKEN())
    SubjY = ToInt(GETTOKEN())
    SubjLen = ToInt(GETTOKEN())

    FGet 1, LINE
    TOKENIZE LINE
    NumberX = ToInt(GETTOKEN())
    NumberY = ToInt(GETTOKEN())
    
    FGet 1, LINE
    TOKENIZE LINE
    DateX = ToInt(GETTOKEN())
    DateY = ToInt(GETTOKEN())
    
    FGet 1, LINE
    TOKENIZE LINE
    MsgX1 = ToInt(GETTOKEN())
    MsgY1 = ToInt(GETTOKEN())
    MsgX2 = ToInt(GETTOKEN())
    MsgY2 = ToInt(GETTOKEN())

    FGet 1, LINE
    SplitByComma(LINE)
    PrevX = ToInt(CsvToken[0])
    PrevY = ToInt(CsvToken[1])
    PrevLabel = CsvToken[2]

    FGet 1, LINE
    SplitByComma(LINE)
    NextX = ToInt(CsvToken[0])
    NextY = ToInt(CsvToken[1])
    NextLabel = CsvToken[2]

    FGet 1, LINE
    SplitByComma(LINE)
    ReplyX = ToInt(CsvToken[0])
    ReplyY = ToInt(CsvToken[1])
    ReplyLabel = CsvToken[2]

    FGet 1, LINE
    SplitByComma(LINE)
    QuitX = ToInt(CsvToken[0])
    QuitY = ToInt(CsvToken[1])
    QuitLabel = CsvToken[2]

    FClose 1
ENDPROC

PROCEDURE SplitByComma(STRING S)
    CsvCount = 0
    INTEGER pos
    STRING part
    LOOP
        pos = InStr(S, ",")
        IF pos == 0 THEN
            part = S
            WHILE (LEN(part) > 0 && Left(part,1) == " ") DO
                part = Mid(part,2,LEN(part)-1)
            ENDWHILE

            WHILE (LEN(part) > 0 && Right(part,1) == " ") DO
                part = Left(part,LEN(part)-1)
            ENDWHILE

            CsvToken[CsvCount] = part
            CsvCount += 1
            BREAK
        ENDIF

        part = Left(S, pos - 1)
        WHILE (LEN(part) > 0 && Left(part,1) == " ") DO
             part = Mid(part,2,LEN(part)-1)
        ENDWHILE
        
        WHILE (LEN(part) > 0 && Right(part,1) == " ") DO
            part = Left(part,LEN(part)-1)
        ENDWHILE

        CsvToken[CsvCount] = part
        CsvCount += 1
        S = Mid(S, pos + 1, LEN(S) - pos)
    ENDLOOP
ENDPROC